#include <bits/stdc++.h>
using namespace std;


class Solution 
{
public:
    // 固定一個枚舉+O(n)雙指標找最靠近 -> O(n ^ 2)
    int threeSumClosest(vector<int>& nums, int target) 
    {
        sort(nums.begin(), nums.end());

        int n = nums.size();
        int resDiff = 0x3f3f3f3f;
        int res = 0;
        for (int i = 0; i < n - 2; ++i) // 固定一個
        {
            int L = i + 1, R = n - 1; // 雙指標找最靠近
            while (L < R)
            {
                int curr = nums[i] + nums[L] + nums[R];
                if (resDiff > abs(curr - target))
                {
                    resDiff = abs(curr - target);
                    res = curr;
                }
                if (curr < target)
                    ++L;
                else if (curr > target)
                    --R;
                else
                    return res;
            }
        }

        return res;
    }
};


int main()
{
    Solution S;
    vector<int> nums = {};
    int target = 45;
    S.threeSumClosest(nums, target);
    return 0;
}